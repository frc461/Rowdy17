// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AlignWithGoal.h"

//#define VISION_TUNING
#define CAMERA_WIDTH 320.0
#define CAMERA_HEIGHT 160.0
#define SEEK_ROTATION_SPEED 0.35

using namespace cv;
using namespace std;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AlignWithGoal::AlignWithGoal(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

	image = frcCreateImage(IMAQ_IMAGE_RGB);

	rectCenter = 0.5;

	Requires(Robot::driveTrain.get());
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AlignWithGoal::Initialize() {
	visionSetup();
	pid->SetInputRange(-40,40);
	pid->SetOutputRange(-1, 1);
	pid->SetContinuous(false);
	t->Start();
	shouldUpdateFrame = true;
}

void AlignWithGoal::visionSetup() {
	while (!video.open(0, CAMERA_WIDTH, CAMERA_HEIGHT,7.5))
	{
		printf("Error connecting to camera stream, retrying\n");
	}

	printf("Opened Camera\n");

	if (!video.isOpened()) {
		printf("Could not open video\n");
	}

	image = frcCreateImage(IMAQ_IMAGE_RGB);

#ifdef VISION_TUNING
	SmartDashboard::PutNumber("hLow", hLow);
	SmartDashboard::PutNumber("hHigh", hHigh);
	SmartDashboard::PutNumber("sLow", sLow);
	SmartDashboard::PutNumber("sHigh", sHigh);
	SmartDashboard::PutNumber("vLow", vLow);
	SmartDashboard::PutNumber("vHigh", vHigh);
	SmartDashboard::PutNumber("minRectWidth", minRectWidth);
	SmartDashboard::PutNumber("maxRectWidth", maxRectWidth);
	SmartDashboard::PutNumber("minRectHeight", minRectHeight);
	SmartDashboard::PutNumber("maxRectHeight", maxRectHeight);
#endif
}

void AlignWithGoal::filterContours() {
	filteredContours.clear();
	for (unsigned int i = 0; i < contours.size(); i++) {
		cv::Rect bounds = boundingRect(contours[i]);

#ifdef VISION_TUNING
		minRectWidth = SmartDashboard::GetNumber("minRectWidth", minRectWidth);
		maxRectWidth = SmartDashboard::GetNumber("maxRectWidth", maxRectWidth);
		minRectHeight = SmartDashboard::GetNumber("minRectHeight", minRectHeight);
		maxRectHeight = SmartDashboard::GetNumber("maxRectHeight", maxRectHeight);
#endif

		if (bounds.width > minRectWidth &&
			bounds.width < maxRectWidth &&
			bounds.height > minRectHeight &&
			bounds.height < maxRectHeight)
		{
			filteredContours.push_back(bounds);
		}
	}
}

void AlignWithGoal::findAndDrawRect() {
	//Creates a copy of thresholded to pass to findContours so that the original isn't modified
	findContours(thresholded.clone(), contours, RETR_EXTERNAL, CHAIN_APPROX_TC89_KCOS);

	filterContours();

	unsigned int filteredCount = filteredContours.size();
	printf("%ud filteredCountours\n", filteredCount);

	if (filteredCount > 0) {
		for (unsigned int i = 0; i < filteredCount; i++) {
			rectangle(thresholded, filteredContours[i], Scalar(255,255,255));
			cv::Rect contour = filteredContours[i];
			float center = (contour.x + contour.width / 2) / CAMERA_WIDTH;
			printf("Center: %f\n", center);
			rectCenter = center;
			shouldUpdateFrame = false;
		}
	}

	else {
		Robot::driveTrain->TankDrive(SEEK_ROTATION_SPEED, -SEEK_ROTATION_SPEED);
	}

	imwrite("/var/volatile/tmp/opencv-frame.jpg", thresholded);
	frcReadImage(image,"/var/volatile/tmp/opencv-frame.jpg");
	CameraServer::GetInstance()->SetImage(image);
}

void AlignWithGoal::redrawHSV(int pos, void *) {

#ifdef VISION_TUNING
	hLow = SmartDashboard::GetNumber("hLow", hLow);
	hHigh = SmartDashboard::GetNumber("hHigh", hHigh);
	sLow = SmartDashboard::GetNumber("sLow", sLow);
	sHigh = SmartDashboard::GetNumber("sHigh", sHigh);
	vLow = SmartDashboard::GetNumber("vLow", vLow);
	vHigh = SmartDashboard::GetNumber("vHigh", vHigh);
#endif

	inRange(frame, Scalar(hLow, sLow, vLow), Scalar(hHigh, sHigh, vHigh), thresholded);
	findAndDrawRect();
}

void AlignWithGoal::vision() {
	if (shouldUpdateFrame) {
		pid->Disable();
		video >> frame;

		if (frame.empty()) {
			printf("Frame empty\n");
			return;
		}

		cvtColor(frame, hsv, CV_BGR2HSV);

		if (hsv.empty()) {
			printf("HSV empty\n");
			return;
		}

		redrawHSV(0, NULL);

		if (!shouldUpdateFrame) {
			float targetAngle = (rectCenter * 66) - 33 - 1;
			RobotMap::gyro->Reset();
			pid->SetSetpoint(targetAngle);
			pid->Enable();
		}
	}

	else {
		float currentAngle = RobotMap::gyro->GetAngle();
		visionTargetCenter.set(currentAngle);
		float out = pid->Get();

		if (out > 0) {
			out += 0.08;
		}

		else {
			out -= 0.08;
		}

		printf("Target angle: %f, current angle: %f, output: %f\n", (rectCenter * 66) - 33, currentAngle, out);
		Robot::driveTrain->TankDrive(out, -out);
	}
}

// Called repeatedly when this Command is scheduled to run
void AlignWithGoal::Execute() {
	vision();
}

// Make this return true when this Command no longer needs to run execute()
bool AlignWithGoal::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void AlignWithGoal::End() {
	if (video.isOpened())
		video.release();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AlignWithGoal::Interrupted() {
	if (video.isOpened())
		video.release();
}
