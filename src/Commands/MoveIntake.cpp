// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "MoveIntake.h"
#define ROLLERSPEED 0.5

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

MoveIntake::MoveIntake(double moveSpeed, double rollerSpeed): Command() {
    m_moveSpeed = moveSpeed;
    m_rollerSpeed = rollerSpeed;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::intake.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

	intakePosition = Intake::IntakePositionUp;
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void MoveIntake::Initialize() {
	Robot::intake->SetIntakePosition(Intake::IntakePositionUp);
}

// Called repeatedly when this Command is scheduled to run
void MoveIntake::Execute() {
	std::shared_ptr<Joystick> xboxController = Robot::oi->getXboxController();

	if (xboxController->GetRawButton(XboxButtonA)) {
		Robot::intake->SetRollerSpeed(-ROLLERSPEED);
	}
	else if (xboxController->GetRawButton(XboxButtonB)) {
		Robot::intake->SetRollerSpeed(ROLLERSPEED);
	}
	else {
		Robot::intake->SetRollerSpeed(0.0f);
	}

	if (xboxController->GetRawButton(XboxButtonLeftBumper)) {
		intakePosition = Intake::IntakePositionDown;
	}
	else if (xboxController->GetRawButton(XboxButtonRightBumper)) {
		intakePosition = Intake::IntakePositionUp;

	}

	Robot::intake->SetIntakePosition(intakePosition);
}

// Make this return true when this Command no longer needs to run execute()
bool MoveIntake::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void MoveIntake::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void MoveIntake::Interrupted() {

}
