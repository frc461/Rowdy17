// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::climbingClimberController;
std::shared_ptr<SpeedController> RobotMap::climbingWinchController;
std::shared_ptr<SpeedController> RobotMap::driveTrainFrontLeftController;
std::shared_ptr<SpeedController> RobotMap::driveTrainFrontRightController;
std::shared_ptr<SpeedController> RobotMap::driveTrainBackLeftController;
std::shared_ptr<SpeedController> RobotMap::driveTrainBackRightController;
std::shared_ptr<RobotDrive> RobotMap::driveTrainRobotDrive41;
std::shared_ptr<SpeedController> RobotMap::intakeRollerController;
std::shared_ptr<DoubleSolenoid> RobotMap::intakeIntakeMovementPneumatic;
std::shared_ptr<SpeedController> RobotMap::manipulatorManipulatorController;
std::shared_ptr<Solenoid> RobotMap::firingFirePneumatic0;
std::shared_ptr<Solenoid> RobotMap::firingFirePneumatic1;
std::shared_ptr<Solenoid> RobotMap::firingFirePneumatic2;
std::shared_ptr<Solenoid> RobotMap::firingFirePneumatic3;
std::shared_ptr<DoubleSolenoid> RobotMap::transmissionTransmissionPneumatic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    climbingClimberController.reset(new Spark(6));
    lw->AddActuator("Climbing", "ClimberController", (Spark&) climbingClimberController);
    
    climbingWinchController.reset(new Spark(7));
    lw->AddActuator("Climbing", "WinchController", (Spark&) climbingWinchController);
    
    driveTrainFrontLeftController.reset(new VictorSP(0));
    lw->AddActuator("DriveTrain", "FrontLeftController", (VictorSP&) driveTrainFrontLeftController);
    
    driveTrainFrontRightController.reset(new VictorSP(2));
    lw->AddActuator("DriveTrain", "FrontRightController", (VictorSP&) driveTrainFrontRightController);
    
    driveTrainBackLeftController.reset(new VictorSP(1));
    lw->AddActuator("DriveTrain", "BackLeftController", (VictorSP&) driveTrainBackLeftController);
    
    driveTrainBackRightController.reset(new VictorSP(3));
    lw->AddActuator("DriveTrain", "BackRightController", (VictorSP&) driveTrainBackRightController);
    
    driveTrainRobotDrive41.reset(new RobotDrive(driveTrainFrontLeftController, driveTrainBackLeftController,
              driveTrainFrontRightController, driveTrainBackRightController));
    
    driveTrainRobotDrive41->SetSafetyEnabled(true);
        driveTrainRobotDrive41->SetExpiration(0.1);
        driveTrainRobotDrive41->SetSensitivity(0.5);
        driveTrainRobotDrive41->SetMaxOutput(1.0);

    intakeRollerController.reset(new Spark(4));
    lw->AddActuator("Intake", "RollerController", (Spark&) intakeRollerController);
    
    intakeIntakeMovementPneumatic.reset(new DoubleSolenoid(0, 6, 7));
    lw->AddActuator("Intake", "IntakeMovementPneumatic", intakeIntakeMovementPneumatic);
    
    manipulatorManipulatorController.reset(new Spark(5));
    lw->AddActuator("Manipulator", "ManipulatorController", (Spark&) manipulatorManipulatorController);
    
    firingFirePneumatic0.reset(new Solenoid(0, 0));
    lw->AddActuator("Firing", "FirePneumatic0", firingFirePneumatic0);
    
    firingFirePneumatic1.reset(new Solenoid(0, 1));
    lw->AddActuator("Firing", "FirePneumatic1", firingFirePneumatic1);
    
    firingFirePneumatic2.reset(new Solenoid(0, 2));
    lw->AddActuator("Firing", "FirePneumatic2", firingFirePneumatic2);
    
    firingFirePneumatic3.reset(new Solenoid(0, 3));
    lw->AddActuator("Firing", "FirePneumatic3", firingFirePneumatic3);
    
    transmissionTransmissionPneumatic.reset(new DoubleSolenoid(0, 4, 5));
    lw->AddActuator("Transmission", "TransmissionPneumatic", transmissionTransmissionPneumatic);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
