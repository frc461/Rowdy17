// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/Drive.h"
#include "Commands/EatBoulders.h"
#include "Commands/FireCatapult.h"
#include "Commands/Grapple.h"
#include "Commands/RaiseLowerIntake.h"
#include "Commands/ShiftGears.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    xbox.reset(new Joystick(2));
    
    rollOut.reset(new JoystickButton(xbox.get(), 1));
    rollOut->WhileHeld(new EatBoulders(-1));
    rollIn.reset(new JoystickButton(xbox.get(), 1));
    rollIn->WhileHeld(new EatBoulders(1));
    intakeDown.reset(new JoystickButton(xbox.get(), 1));
    intakeDown->WhileHeld(new RaiseLowerIntake(false));
    intakeUp.reset(new JoystickButton(xbox.get(), 1));
    intakeUp->WhileHeld(new RaiseLowerIntake(true));
    rightDriveJoystick.reset(new Joystick(1));
    
    gear2.reset(new JoystickButton(rightDriveJoystick.get(), 1));
    gear2->WhileHeld(new ShiftGears(false));
    gear1.reset(new JoystickButton(rightDriveJoystick.get(), 1));
    gear1->WhileHeld(new ShiftGears(true));
    leftDriveJoystick.reset(new Joystick(0));
    

    // SmartDashboard Buttons
    SmartDashboard::PutData("ShiftGears", new ShiftGears(true));
    SmartDashboard::PutData("RaiseLowerIntake", new RaiseLowerIntake(true));
    SmartDashboard::PutData("FireCatapult", new FireCatapult());
    SmartDashboard::PutData("Grapple", new Grapple());
    SmartDashboard::PutData("EatBoulders: in", new EatBoulders(1));
    SmartDashboard::PutData("EatBoulders: out", new EatBoulders(-1));
    SmartDashboard::PutData("EatBoulders: stopped", new EatBoulders(0));
    SmartDashboard::PutData("Drive", new Drive(0,0));
    SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getLeftDriveJoystick() {
   return leftDriveJoystick;
}

std::shared_ptr<Joystick> OI::getRightDriveJoystick() {
   return rightDriveJoystick;
}

std::shared_ptr<Joystick> OI::getXbox() {
   return xbox;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
